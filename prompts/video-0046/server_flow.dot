digraph ServerFlow {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue];
    edge [fontsize=10];

    subgraph cluster_init {
        label="Initialization";
        style="filled";
        color="lightgrey";
        node [fillcolor=lightyellow];
        start [label="Start", shape=ellipse, fillcolor=palegreen];
        create_socket [label="Create Listen Socket\n(socket, non-blocking)"];
        set_reuse [label="Set SO_REUSEADDR"];
        bind_port [label="Bind to localhost:4242"];
        listen_conn [label="Listen for Connections"];
        create_epoll [label="Create Epoll Instance\n(epoll_create1)"];
        add_listen_fd [label="Add Listen FD to Epoll\n(epoll_ctl_add)"];
        start -> create_socket -> set_reuse -> bind_port -> listen_conn -> create_epoll -> add_listen_fd;
    }

    subgraph cluster_loop {
        label="Main Event Loop";
        style="filled";
        color="lightgrey";
        node [fillcolor=lightcyan];
        
        epoll_wait [label="Wait for Events\n(epoll_wait)", shape= Mdiamond, fillcolor=deepskyblue];
        event_is_listen [label="Event on Listen FD?", shape=diamond, fillcolor=lightgoldenrod1];
        
        subgraph cluster_accept {
            label="New Connection";
            node [fillcolor=honeydew];
            accept_conn [label="Accept New Connection\n(accept4, non-blocking)"];
            create_state [label="Allocate ConnectionState"];
            add_client_fd [label="Add Client FD to Epoll\n(with pointer to State)"];
            accept_conn -> create_state -> add_client_fd -> epoll_wait [label="Ready for next event"];
        }
        
        subgraph cluster_client_event {
            label="Client Event";
            node [fillcolor=mistyrose];

            handle_event [label="Handle Client Event"];
            is_error_hup [label="Error or Hangup?", shape=diamond, fillcolor=lightgoldenrod1];
            is_readable [label="Data to Read (EPOLLIN)?", shape=diamond, fillcolor=lightgoldenrod1];
            close_conn [label="Close Connection\n(epoll_ctl_del, close, free)", fillcolor=salmon];

            handle_event -> is_error_hup;
            is_error_hup -> close_conn [label="Yes"];
            is_error_hup -> is_readable [label="No"];
            
            subgraph cluster_read_process {
                label="Read & Process Cycle";
                node [fillcolor=lightpink];
                read_data [label="Read Data into Buffer"];
                is_closed [label="read() returns 0?", shape=diamond, fillcolor=lightgoldenrod1];
                process_buffer [label="Process complete messages\nin buffer (State Machine)"];
                
                is_readable -> read_data [label="Yes"];
                read_data -> is_closed;
                is_closed -> close_conn [label="Yes"];
                is_closed -> process_buffer [label="No"];
                process_buffer -> epoll_wait [label="Ready for next event"];
                is_readable -> epoll_wait [label="No"];
            }
        }
        
        epoll_wait -> event_is_listen;
        event_is_listen -> accept_conn [label="Yes"];
        event_is_listen -> handle_event [label="No"];
        close_conn -> epoll_wait [label="Ready for next event"];
    }
    
    add_listen_fd -> epoll_wait [lhead=cluster_loop];
}